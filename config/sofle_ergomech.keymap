/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

#define BASE 0
#define LOWER 1
#define RAISE 2
#define ADJUST 3

/ {
    // Activate ADJUST layer by pressing raise and lower

    conditional_layers { compatible = "zmk,conditional-layers"; };

    keymap {
        compatible = "zmk,keymap";

        colemakdh {
            label = "default";

            // ------------------------------------------------------------------------------------------------------------
            // |   `   |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |       |
            // |  ESC  |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   | BKSPC |
            // |  TAB  |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   ;   |   '   |
            // | SHIFT |  Z  |  X  |  C   |  V   |  B   |  MUTE  |  |       |  N   |  M    |  ,    |  .   |   /   | SHIFT |
            //               | GUI | ALT  | CTRL | LOWER|  ENTER |  | SPACE | RAISE| CTRL  | ALT   | GUI  |

            bindings = <
&kp GRAVE   &kp N1    &kp N2    &kp N3     &kp N4              &kp N5           &kp N6       &kp N7       &kp N8        &kp N9    &kp N0    &none
&kp ESC     &kp Q     &kp W     &kp F      &kp P               &kp B            &kp J        &kp L        &kp U         &kp Y     &kp SQT   &trans
&kp TAB     &kp A     &kp R     &kp S      &kp T               &kp G            &kp M        &kp N        &kp E         &kp I     &kp O     &trans
&kp LCTRL   &kp Z     &kp X     &kp C      &kp D               &kp V            &kp K        &kp H        &kp COMMA     &kp DOT   &kp FSLH  &trans
&kp C_MUTE  &kp LGUI  &kp LALT  &kp LCTRL  &mt LEFT_SHIFT TAB  &lt 1 BACKSPACE  &lt 1 SPACE  &lt 2 ENTER  &kp RCTRL     &kp RALT  &kp RGUI
                                                                                &kp ENTER    &kp RIGHT    &kp UP_ARROW  &kp LEFT  &kp DOWN
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

        nav+symbols {
            bindings = <
&kp LS(TILDE)  &kp LS(EXCL)  &kp LS(AT)  &kp LS(POUND)  &kp LS(DLLR)  &kp LS(PRCNT)  &kp LS(CARET)  &kp LS(AMPS)   &kp LS(STAR)  &kp LS(LPAR)  &kp LS(RPAR)   &kp LBKT
&kp TAB        &kp TAB       &kp BSPC    &kp UP         &kp DEL       &kp LBKT       &kp RBKT       &kp GRAVE      &kp LS(PLUS)  &kp LS(PIPE)  &kp LS(DQT)    &trans
&kp ESC        &kp LSHFT     &kp LEFT    &kp DOWN       &kp RIGHT     &kp LS(LPAR)   &kp LS(RPAR)   &kp MINUS      &kp EQUAL     &kp BSLH      &kp SEMI       &trans
&trans         &kp LGUI      &kp X       &kp HOME       &kp END       &kp LS(LBRC)   &kp LS(RBRC)   &kp LS(UNDER)  &kp LS(LT)    &kp LS(GT)    &kp LS(QMARK)  &kp RET
&trans         &trans        &trans      &trans         &trans        &trans         &trans         &trans         &trans        &trans        &trans
                                                                                     &trans         &trans         &trans        &trans        &trans
            >;
        };

        num+fn {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans   &trans   &trans  &trans  &trans   &trans
&trans  &kp F1  &kp F2  &kp F3  &kp F4  &kp F5  &kp F6   &kp F7   &kp F8  &kp F9  &kp F10  &trans
&trans  &kp N1  &kp N2  &kp N3  &kp N4  &kp N5  &kp N6   &kp N7   &kp N8  &kp N9  &kp N0   &trans
&trans  &trans  &trans  &trans  &trans  &trans  &kp F11  &kp F12  &trans  &trans  &trans   &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans   &trans   &trans  &trans  &trans
                                                &trans   &trans   &trans  &trans  &trans
            >;
        };

        media {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
                                                &trans  &trans  &trans  &trans  &trans
            >;
        };
    };
};
